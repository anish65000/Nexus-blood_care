const bcrypt = require('bcrypt');

const UserRegisterController = (app, connection) => {
  // Helper function to run SQL queries using callback-based approach
  const query = (connection, sql, params) => {
    return new Promise((resolve, reject) => {
      connection.query(sql, params, (error, results, fields) => {
        if (error) {
          reject(error);
        } else {
          resolve(results);
        }
      });
    });
  };

  app.post('/register/user', async (req, res) => {
    try {
      const {
        userName,
        userAge,
        userGender,
        userBloodGroup,
        userPhone,
        userEmail,
        userAddress,
        userUserName,
        userPassword,
        userRole,
        userPasswordConfirmation,
      } = req.body;

      // Input validation
      if (!userName || !userAge || !userGender || !userBloodGroup || !userPhone || !userEmail || !userAddress || !userUserName || !userPassword || !userRole || !userPasswordConfirmation) {
        return res.status(400).send({ message: 'All fields are required' });
      }

      if (userPassword !== userPasswordConfirmation) {
        return res.status(400).send({ message: 'Passwords do not match' });
      }

      // Check if user username already exists
      const existingUser = await query(connection, 'SELECT * FROM user_login WHERE userName = ?', [userUserName]);

      if (existingUser.length > 0) {
        return res.status(400).send({ message: 'User username already exists' });
      }

      // Hash the user password
      const hashedPassword = await bcrypt.hash(userPassword, 10);

      // Start a transaction
      connection.beginTransaction(async (transactionErr) => {
        if (transactionErr) {
          console.error('Error starting transaction:', transactionErr);
          return res.status(500).send({ error: 'Internal Server Error' });
        }

        try {
          // Insert user details
          const userDetailsResult = await query(
            connection,
            'INSERT INTO user_details (userName, userAge, userGender, userBloodGroup, userPhone, userEmail, userAddress, userRole) VALUES (?, ?, ?, ?, ?, ?, ?, ?)',
            [userName, userAge, userGender, userBloodGroup, userPhone, userEmail, userAddress, userRole]
          );

          if (!userDetailsResult || !userDetailsResult.insertId) {
            throw new Error('Error inserting user details');
          }

          // Retrieve the user ID generated by the database
          const userId = userDetailsResult.insertId;

          // Insert user login details
          await query(
            connection,
            'INSERT INTO user_login (user_id, userName, userpassword) VALUES (?, ?, ?)',
            [userId, userUserName, hashedPassword]
          );

          // Commit the transaction
          connection.commit((commitErr) => {
            if (commitErr) {
              console.error('Error committing transaction:', commitErr);
              connection.rollback();
              return res.status(500).send({ error: 'Internal Server Error' });
            }

            // Registration successful
            console.log('User Registered Successfully');
            res.status(201).send({ message: 'USER REGISTRATION SUCCESSFUL!' });
          });
        } catch (err) {
          // Rollback the transaction in case of an error
          connection.rollback();
          console.error('Error during user registration:', err);
          res.status(500).send({ error: 'Internal Server Error' });
        }
      });
    } catch (error) {
      console.error('Error during user registration:', error);
      res.status(500).send({ error: 'Internal Server Error' });
    }
  });
};

module.exports = UserRegisterController;
