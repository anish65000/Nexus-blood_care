{"ast":null,"code":"var _s = $RefreshSig$();\n// auth.js\nimport { useState } from 'react';\nimport axios from 'axios';\nexport function useAuth() {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState(null);\n  const login = async (username, password) => {\n    try {\n      // Make a request to the backend to authenticate\n      const response = await axios.post('http://localhost:5000/Staff/login', {\n        stfUserName: username,\n        stfPassword: password\n      });\n\n      // Extract token from response\n      const token = response.data.token;\n\n      // Store token in local storage\n      localStorage.setItem('token', token);\n\n      // Set isAuthenticated to true and set user\n      setIsAuthenticated(true);\n      setUser(username);\n\n      // Return response for handling if needed\n      return response;\n    } catch (error) {\n      // If login fails, throw an error\n      throw new Error('Login failed');\n    }\n  };\n  const logout = () => {\n    // Clear token from local storage\n    localStorage.removeItem('token');\n\n    // Reset isAuthenticated and user\n    setIsAuthenticated(false);\n    setUser(null);\n  };\n  return {\n    isAuthenticated,\n    user,\n    login,\n    logout\n  };\n}\n_s(useAuth, \"mbKa3mHmiYR6ypr2drLsAAm+MEk=\");","map":{"version":3,"names":["useState","axios","useAuth","_s","isAuthenticated","setIsAuthenticated","user","setUser","login","username","password","response","post","stfUserName","stfPassword","token","data","localStorage","setItem","error","Error","logout","removeItem"],"sources":["C:/Users/VICTUS/OneDrive/Desktop/Nexus blood_care/frontend/src/Component/Staff/Auth.js"],"sourcesContent":["// auth.js\r\nimport { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport function useAuth() {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [user, setUser] = useState(null);\r\n\r\n  const login = async (username, password) => {\r\n    try {\r\n      // Make a request to the backend to authenticate\r\n      const response = await axios.post('http://localhost:5000/Staff/login', {\r\n        stfUserName: username,\r\n        stfPassword: password\r\n      });\r\n\r\n      // Extract token from response\r\n      const token = response.data.token;\r\n\r\n      // Store token in local storage\r\n      localStorage.setItem('token', token);\r\n\r\n      // Set isAuthenticated to true and set user\r\n      setIsAuthenticated(true);\r\n      setUser(username);\r\n\r\n      // Return response for handling if needed\r\n      return response;\r\n    } catch (error) {\r\n      // If login fails, throw an error\r\n      throw new Error('Login failed');\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    // Clear token from local storage\r\n    localStorage.removeItem('token');\r\n    \r\n    // Reset isAuthenticated and user\r\n    setIsAuthenticated(false);\r\n    setUser(null);\r\n  };\r\n\r\n  return {\r\n    isAuthenticated,\r\n    user,\r\n    login,\r\n    logout,\r\n  };\r\n}\r\n"],"mappings":";AAAA;AACA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,KAAK,MAAM,OAAO;AAEzB,OAAO,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACxB,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGL,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAACM,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAEtC,MAAMQ,KAAK,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,KAAK;IAC1C,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,IAAI,CAAC,mCAAmC,EAAE;QACrEC,WAAW,EAAEJ,QAAQ;QACrBK,WAAW,EAAEJ;MACf,CAAC,CAAC;;MAEF;MACA,MAAMK,KAAK,GAAGJ,QAAQ,CAACK,IAAI,CAACD,KAAK;;MAEjC;MACAE,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,KAAK,CAAC;;MAEpC;MACAV,kBAAkB,CAAC,IAAI,CAAC;MACxBE,OAAO,CAACE,QAAQ,CAAC;;MAEjB;MACA,OAAOE,QAAQ;IACjB,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACd;MACA,MAAM,IAAIC,KAAK,CAAC,cAAc,CAAC;IACjC;EACF,CAAC;EAED,MAAMC,MAAM,GAAGA,CAAA,KAAM;IACnB;IACAJ,YAAY,CAACK,UAAU,CAAC,OAAO,CAAC;;IAEhC;IACAjB,kBAAkB,CAAC,KAAK,CAAC;IACzBE,OAAO,CAAC,IAAI,CAAC;EACf,CAAC;EAED,OAAO;IACLH,eAAe;IACfE,IAAI;IACJE,KAAK;IACLa;EACF,CAAC;AACH;AAAClB,EAAA,CA7CeD,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}