{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\VICTUS\\\\OneDrive\\\\Desktop\\\\Nexus blood_care\\\\frontend\\\\src\\\\Component\\\\Staff\\\\fe.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NearbyBloodBanks = () => {\n  _s();\n  const [bloodBanks, setBloodBanks] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchNearbyBloodBanks = async () => {\n      try {\n        const position = await getCurrentPosition();\n        const response = await fetch(`http://localhost:5000/login/stf/inv/nearby?radius=10&userLatitude=${position.latitude}&userLongitude=${position.longitude}`);\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const data = await response.json();\n        setBloodBanks(data);\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching nearby blood banks:', error);\n        setError('Error fetching nearby blood banks');\n        setLoading(false);\n      }\n    };\n    fetchNearbyBloodBanks();\n  }, []);\n  const getCurrentPosition = () => {\n    return new Promise((resolve, reject) => {\n      navigator.geolocation.getCurrentPosition(position => resolve({\n        latitude: position.coords.latitude,\n        longitude: position.coords.longitude\n      }), error => reject(error));\n    });\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Nearby Blood Banks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: bloodBanks.map(bank => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [bank.name, \" - \", bank.distance, \" km away\"]\n      }, bank.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(NearbyBloodBanks, \"eV/Uw6YZvXbAP6qU3zCpPBD8SS0=\");\n_c = NearbyBloodBanks;\nexport default NearbyBloodBanks;\nvar _c;\n$RefreshReg$(_c, \"NearbyBloodBanks\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","NearbyBloodBanks","_s","bloodBanks","setBloodBanks","loading","setLoading","error","setError","fetchNearbyBloodBanks","position","getCurrentPosition","response","fetch","latitude","longitude","ok","Error","status","data","json","console","Promise","resolve","reject","navigator","geolocation","coords","children","fileName","_jsxFileName","lineNumber","columnNumber","map","bank","name","distance","id","_c","$RefreshReg$"],"sources":["C:/Users/VICTUS/OneDrive/Desktop/Nexus blood_care/frontend/src/Component/Staff/fe.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nconst NearbyBloodBanks = () => {\r\n  const [bloodBanks, setBloodBanks] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchNearbyBloodBanks = async () => {\r\n        try {\r\n          const position = await getCurrentPosition();\r\n          const response = await fetch(`http://localhost:5000/login/stf/inv/nearby?radius=10&userLatitude=${position.latitude}&userLongitude=${position.longitude}`);\r\n          \r\n          if (!response.ok) {\r\n            throw new Error(`HTTP error! Status: ${response.status}`);\r\n          }\r\n      \r\n          const data = await response.json();\r\n          setBloodBanks(data);\r\n          setLoading(false);\r\n        } catch (error) {\r\n          console.error('Error fetching nearby blood banks:', error);\r\n          setError('Error fetching nearby blood banks');\r\n          setLoading(false);\r\n        }\r\n      };\r\n      \r\n\r\n    fetchNearbyBloodBanks();\r\n  }, []);\r\n\r\n  const getCurrentPosition = () => {\r\n    return new Promise((resolve, reject) => {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => resolve({ latitude: position.coords.latitude, longitude: position.coords.longitude }),\r\n        (error) => reject(error)\r\n      );\r\n    });\r\n  };\r\n\r\n  if (loading) {\r\n    return <p>Loading...</p>;\r\n  }\r\n\r\n  if (error) {\r\n    return <p>{error}</p>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>Nearby Blood Banks</h2>\r\n      <ul>\r\n        {bloodBanks.map((bank) => (\r\n          <li key={bank.id}>{bank.name} - {bank.distance} km away</li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NearbyBloodBanks;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}