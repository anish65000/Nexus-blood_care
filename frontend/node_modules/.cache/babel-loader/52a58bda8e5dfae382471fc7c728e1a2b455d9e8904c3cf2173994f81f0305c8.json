{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\VICTUS\\\\OneDrive\\\\Desktop\\\\Nexus blood_care\\\\frontend\\\\src\\\\Component\\\\Staff\\\\DonorInventory.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport UserNavbar from \"./UserNavbar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst DonorStockController = () => {\n  _s();\n  const [donorStockList, setDonorStockList] = useState([]);\n  const [editingDonorStock, setEditingDonorStock] = useState(null);\n  useEffect(() => {\n    getDonorStocks();\n  }, []);\n  const getDonorStocks = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/login/stf/ds');\n      setDonorStockList(response.data);\n    } catch (error) {\n      console.error('Error fetching donor stocks:', error);\n    }\n  };\n  const handleUpdateDonorStock = donor_id => {\n    const donorStockToUpdate = donorStockList.find(item => item.donor_id === donor_id);\n    if (!donorStockToUpdate) {\n      console.error('Donor stock not found for updating.');\n      return;\n    }\n\n    // Set the editing donor and show the form\n    setEditingDonorStock(donorStockToUpdate);\n  };\n  const handleCancelUpdate = () => {\n    // Clear the editing donor\n    setEditingDonorStock(null);\n  };\n  const handleSaveUpdate = () => {\n    // Use axios to send the updated data to the server\n    axios.put(`http://localhost:5000/login/stf/ds/update/${editingDonorStock.donor_id}`, editingDonorStock).then(response => {\n      console.log('Donor stock updated successfully:', response.data);\n      // Refresh the entire list from the server after update\n      getDonorStocks();\n      // Clear the editing donor\n      setEditingDonorStock(null);\n    }).catch(error => console.error('Error updating donor stock:', error));\n  };\n  const handleDeleteDonorStock = donor_id => {\n    axios.delete(`http://localhost:5000/login/stf/ds/delete/${donor_id}`).then(response => {\n      console.log('Donor stock deleted successfully:', response.data);\n      // Refresh the entire list from the server after deletion\n      getDonorStocks();\n    }).catch(error => console.error('Error deleting donor stock:', error));\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(UserNavbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container mx-auto p-4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(DonorStockController, \"601MlhignzEOJfGpep0fEJ5UMKc=\");\n_c = DonorStockController;\nexport default DonorStockController;\nvar _c;\n$RefreshReg$(_c, \"DonorStockController\");","map":{"version":3,"names":["React","useState","useEffect","axios","UserNavbar","jsxDEV","_jsxDEV","Fragment","_Fragment","DonorStockController","_s","donorStockList","setDonorStockList","editingDonorStock","setEditingDonorStock","getDonorStocks","response","get","data","error","console","handleUpdateDonorStock","donor_id","donorStockToUpdate","find","item","handleCancelUpdate","handleSaveUpdate","put","then","log","catch","handleDeleteDonorStock","delete","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["C:/Users/VICTUS/OneDrive/Desktop/Nexus blood_care/frontend/src/Component/Staff/DonorInventory.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport UserNavbar from \"./UserNavbar\";\r\n\r\nconst DonorStockController = () => {\r\n  const [donorStockList, setDonorStockList] = useState([]);\r\n  const [editingDonorStock, setEditingDonorStock] = useState(null);\r\n\r\n  useEffect(() => {\r\n    getDonorStocks();\r\n  }, []);\r\n\r\n  const getDonorStocks = async () => {\r\n    try {\r\n      const response = await axios.get('http://localhost:5000/login/stf/ds');\r\n      setDonorStockList(response.data);\r\n    } catch (error) {\r\n      console.error('Error fetching donor stocks:', error);\r\n    }\r\n  };\r\n\r\n  const handleUpdateDonorStock = (donor_id) => {\r\n    const donorStockToUpdate = donorStockList.find((item) => item.donor_id === donor_id);\r\n    if (!donorStockToUpdate) {\r\n      console.error('Donor stock not found for updating.');\r\n      return;\r\n    }\r\n\r\n    // Set the editing donor and show the form\r\n    setEditingDonorStock(donorStockToUpdate);\r\n  };\r\n\r\n  const handleCancelUpdate = () => {\r\n    // Clear the editing donor\r\n    setEditingDonorStock(null);\r\n  };\r\n\r\n  const handleSaveUpdate = () => {\r\n    // Use axios to send the updated data to the server\r\n    axios.put(`http://localhost:5000/login/stf/ds/update/${editingDonorStock.donor_id}`, editingDonorStock)\r\n      .then((response) => {\r\n        console.log('Donor stock updated successfully:', response.data);\r\n        // Refresh the entire list from the server after update\r\n        getDonorStocks();\r\n        // Clear the editing donor\r\n        setEditingDonorStock(null);\r\n      })\r\n      .catch((error) => console.error('Error updating donor stock:', error));\r\n  };\r\n\r\n  const handleDeleteDonorStock = (donor_id) => {\r\n    axios\r\n      .delete(`http://localhost:5000/login/stf/ds/delete/${donor_id}`)\r\n      .then((response) => {\r\n        console.log('Donor stock deleted successfully:', response.data);\r\n        // Refresh the entire list from the server after deletion\r\n        getDonorStocks();\r\n      })\r\n      .catch((error) => console.error('Error deleting donor stock:', error));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <UserNavbar />\r\n      <div className=\"container mx-auto p-4\">\r\n        {/* ... Rest of the code ... */}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DonorStockController;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}